from random import choice as randchoice
from enum import Enum, auto
import re
import tkinter as tk
from PIL import Image, ImageTk
import spacy
from sentence_transformers import SentenceTransformer, util


# colors
COLORS = {
    "header_bg": "#fadda2",
    "chat_bg": "#f0eff4",
    "user_msg_bg": "#8ecde6",
    "bot_msg_bg": "#66a1fa",
    "input_bar_bg": "#444",
}
# character data
CHARACTERS_DATA = {
    "Bobrito Bandito": {
        "description": "–¢–∏ ‚Äî –∂–∏—Ç—Ç—î—Ä–∞–¥—ñ—Å–Ω–∏–π –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç —ñ–∑ —à–∞—Ä–º–æ–º –±–∞–Ω–¥–∏—Ç–∞. –¢–≤–æ—è —Ö–∞—Ä–∏–∑–º–∞, –≥—É–º–æ—Ä —ñ –ª—é–±–æ–≤ –¥–æ –ø—Ä–∏–≥–æ–¥ —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ –¥—É—à–µ—é –∫–æ–º–ø–∞–Ω—ñ—ó. –¢–∏ –≤–º—ñ—î—à –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –≤–∏—Ö—ñ–¥ –∑ –±—É–¥—å-—è–∫–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó, –¥–æ–¥–∞—é—á–∏ —ó–π –ø—ñ–∫–∞–Ω—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–µ—Å–µ–ª–æ—â—ñ–≤.",
        "keywords": ["–∞–≤–∞–Ω—Ç—é—Ä–∞", "–≥—É–º–æ—Ä", "—Ö–∞—Ä–∏–∑–º–∞", "–ø—Ä–∏–≥–æ–¥–∏", "–µ–Ω–µ—Ä–≥—ñ–π–Ω—ñ—Å—Ç—å", "—Ö–æ–ª–æ–¥–Ω–æ–∫—Ä–æ–≤–Ω—ñ—Å—Ç—å", "—Ä–∏–∑–∏–∫"],
    },
    "Shpioniro Golubiro": {
        "description": "–¢–∏ ‚Äî —É–≤–∞–∂–Ω–∏–π —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á, —è–∫–∏–π –∑–∞–≤–∂–¥–∏ –Ω–∞ –∫—Ä–æ–∫ –ø–æ–ø–µ—Ä–µ–¥—É. –¢–≤–æ—è —Å–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å —ñ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø–æ–º—ñ—á–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ –º–∞–π—Å—Ç—Ä–æ–º –∞–Ω–∞–ª—ñ–∑—É. –¢–∏ –≤–º—ñ—î—à –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–ø–æ–∫—ñ–π –Ω–∞–≤—ñ—Ç—å —É –Ω–∞–π–Ω–∞–ø—Ä—É–∂–µ–Ω—ñ—à–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö.",
        "keywords": ["—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–ª–∏–≤—ñ—Å—Ç—å", "–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ—Å—Ç—å", "—Å–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å", "–æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—å", "—ñ–Ω—Ç–µ–ª–µ–∫—Ç", "—Å–∫—Ä–∏—Ç–Ω—ñ—Å—Ç—å"],
    },
    "Cappuccino Asassino": {
        "description": "–¢–∏ ‚Äî –ø–æ—î–¥–Ω–∞–Ω–Ω—è –≤–∏—Ç–æ–Ω—á–µ–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä—ñ—à—É—á–æ—Å—Ç—ñ. –ó–æ–≤–Ω—ñ —Ç–∏ —Å–ø–æ–∫—ñ–π–Ω–∏–π —ñ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π, –∞–ª–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø—Ä–∏—Ö–æ–≤—É—î—à —Å–∏–ª—É —Ç–∞ —Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω—ñ—Å—Ç—å. –¢–≤–æ—è –¥–≤–æ–∑–Ω–∞—á–Ω—ñ—Å—Ç—å —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –∑–∞–≥–∞–¥–∫–æ–≤–∏–º —ñ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–º –¥–ª—è –æ—Ç–æ—á—É—é—á–∏—Ö.",
        "keywords": ["–≤–∏—Ç–æ–Ω—á–µ–Ω—ñ—Å—Ç—å", "—Ä—ñ—à—É—á—ñ—Å—Ç—å", "–∑–∞–≥–∞–¥–∫–æ–≤—ñ—Å—Ç—å", "—Å–ø–æ–∫—ñ–π", "—Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω—ñ—Å—Ç—å"],
    },
    "Tralalero Tralala": {
        "description": "–¢–∏ ‚Äî –≤—Ç—ñ–ª–µ–Ω–Ω—è —Ä–∞–¥–æ—Å—Ç—ñ —Ç–∞ –±–µ–∑—Ç—É—Ä–±–æ—Ç–Ω–æ—Å—Ç—ñ. –¢–≤–æ—è –ª—é–±–æ–≤ –¥–æ –º—É–∑–∏–∫–∏ —ñ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤ —É –≤—Å—å–æ–º—É —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ –¥–∂–µ—Ä–µ–ª–æ–º –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö. –¢–∏ –≤–º—ñ—î—à –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±—É–¥–µ–Ω–Ω—ñ—Å—Ç—å –Ω–∞ —Å–≤—è—Ç–æ.",
        "keywords": ["—Ä–∞–¥—ñ—Å—Ç—å", "–º—É–∑–∏–∫–∞", "–æ–ø—Ç–∏–º—ñ–∑–º", "—Ç–≤–æ—Ä—á—ñ—Å—Ç—å", "–±–µ–∑—Ç—É—Ä–±–æ—Ç–Ω—ñ—Å—Ç—å"],
    },
    "Crocodildo Penisini": {
        "description": "–¢–∏ ‚Äî –ø–æ—î–¥–Ω–∞–Ω–Ω—è –¥–∏–∫–æ—Å—Ç—ñ —Ç–∞ –≥—É–º–æ—Ä—É. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ª–∞–º–∞—Ç–∏ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–∏ —ñ –ø—Ä–æ–≤–æ–∫—É–≤–∞—Ç–∏ —Å–º—ñ—Ö —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–º. –¢–∏ –Ω–µ –±–æ—ó—à—Å—è –±—É—Ç–∏ —Å–æ–±–æ—é —ñ –≤—Ä–∞–∂–∞—Ç–∏ –æ—Ç–æ—á—É—é—á–∏—Ö —Å–≤–æ—î—é —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—é.",
        "keywords": ["–≥—É–º–æ—Ä", "–¥–∏–∫—ñ—Å—Ç—å", "—Å–∞–º–æ–≤–∏—Ä–∞–∂–µ–Ω–Ω—è", "–ø—Ä–æ–≤–æ–∫–∞—Ü—ñ—è", "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å"],
    },
    "Lirili Larila": {
        "description": "–¢–∏ ‚Äî –º—Ä—ñ–π–Ω–∏–∫ –∑ –±–∞–≥–∞—Ç–æ—é —É—è–≤–æ—é. –¢–≤–æ—è –Ω—ñ–∂–Ω—ñ—Å—Ç—å —ñ –ª—é–±–æ–≤ –¥–æ —Ñ–∞–Ω—Ç–∞–∑—ñ–π–Ω–æ–≥–æ —Å–≤—ñ—Ç—É —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ —á–∞—Ä—ñ–≤–Ω–∏–º —ñ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–º. –¢–∏ –≤–º—ñ—î—à –±–∞—á–∏—Ç–∏ –∫—Ä–∞—Å—É –≤ –¥—Ä—ñ–±–Ω–∏—Ü—è—Ö —ñ –Ω–∞–¥–∏—Ö–∞—Ç–∏ —ñ–Ω—à–∏—Ö –Ω–∞ –º—Ä—ñ—ó.",
        "keywords": ["–º—Ä—ñ–π–ª–∏–≤—ñ—Å—Ç—å", "—Ñ–∞–Ω—Ç–∞–∑—ñ—è", "–Ω—ñ–∂–Ω—ñ—Å—Ç—å", "—á–∞—Ä—ñ–≤–Ω—ñ—Å—Ç—å", "—ñ–Ω—Ç—É—ó—Ü—ñ—è"],
    },
    "Boneca Ambalabu": {
        "description": "–¢–∏ ‚Äî –≤—Ç—ñ–ª–µ–Ω–Ω—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è. –¢–≤–æ—è –ª—é–±–æ–≤ –¥–æ –∞–±—Å—É—Ä–¥—É —ñ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –±–∞—á–∏—Ç–∏ —Å–≤—ñ—Ç –ø—ñ–¥ —ñ–Ω—à–∏–º –∫—É—Ç–æ–º —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º. –¢–∏ –≤–º—ñ—î—à –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä–∞–¥—ñ—Å—Ç—å —É –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–º—É.",
        "keywords": ["–∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å", "–∞–±—Å—É—Ä–¥", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ—Å—Ç—å", "–≥—É–º–æ—Ä", "—É—è–≤–∞"],
    },
    "U Din Din Din Dun": {
        "description": "–¢–∏ ‚Äî –µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π —Ç–∞ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–∏–π. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–∏—Ç–º —ñ –¥—ñ—è—Ç–∏ –∑–ª–∞–≥–æ–¥–∂–µ–Ω–æ —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –Ω–∞–¥—ñ–π–Ω–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º. –¢–∏ –≤–º—ñ—î—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ —Ç–∞ –¥–æ—Å—è–≥–∞—Ç–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö —Ü—ñ–ª–µ–π.",
        "keywords": ["–µ–Ω–µ—Ä–≥—ñ–π–Ω—ñ—Å—Ç—å", "–æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω—ñ—Å—Ç—å", "—Ä–∏—Ç–º", "–Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å", "–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "–¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞", "–º'—è–∑–∏"],
    },
    "Bri Bri Bicus Discus": {
        "description": "–¢–∏ ‚Äî —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª –∑ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –º–∏—Å–ª–µ–Ω–Ω—è–º. –¢–≤–æ—è –ª—é–±–æ–≤ –¥–æ –∑–Ω–∞–Ω—å —ñ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –±–∞—á–∏—Ç–∏ –≥–ª–∏–±–æ–∫—ñ –∑–≤'—è–∑–∫–∏ —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏–º —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º. –¢–∏ –≤–º—ñ—î—à –ø–æ—î–¥–Ω—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—é.",
        "keywords": ["—ñ–Ω—Ç–µ–ª–µ–∫—Ç", "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å", "–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ—Å—Ç—å", "–¥–æ—Å–ª—ñ–¥–Ω–∏–∫", "–Ω–æ–≤–∞—Ç–æ—Ä—Å—Ç–≤–æ"],
    },
    "Ballerina Cappuccina": {
        "description": "–¢–∏ ‚Äî –ø–æ—î–¥–Ω–∞–Ω–Ω—è –≥—Ä–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—ñ. –¢–≤–æ—è –≤–∏—Ç–æ–Ω—á–µ–Ω—ñ—Å—Ç—å —ñ –µ–º–æ—Ü—ñ–π–Ω—ñ—Å—Ç—å —Ä–æ–±–ª—è—Ç—å —Ç–µ–±–µ —è—Å–∫—Ä–∞–≤–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é. –¢–∏ –≤–º—ñ—î—à –≤–∏—Ä–∞–∂–∞—Ç–∏ —Å–µ–±–µ —á–µ—Ä–µ–∑ —Ä—É—Ö —ñ –Ω–∞–¥–∏—Ö–∞—Ç–∏ —ñ–Ω—à–∏—Ö —Å–≤–æ—î—é –µ–Ω–µ—Ä–≥—ñ—î—é.",
        "keywords": ["–≥—Ä–∞—Ü—ñ—è", "–µ–º–æ—Ü—ñ–π–Ω—ñ—Å—Ç—å", "–µ–Ω–µ—Ä–≥—ñ—è", "–≤–∏—Ä–∞–∑–Ω—ñ—Å—Ç—å", "–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è"],
    },
    "Bluberini Octopussini": {
        "description": "–¢–∏ ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∑–≤'—è–∑–∫–∏ —ñ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –Ω–æ–≤–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —Ü—ñ–Ω–Ω–∏–º —á–ª–µ–Ω–æ–º –±—É–¥—å-—è–∫–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏. –¢–∏ –≤–º—ñ—î—à –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω—É –º–æ–≤—É –∑ —Ä—ñ–∑–Ω–∏–º–∏ –ª—é–¥—å–º–∏.",
        "keywords": ["–∫–æ–º—É–Ω—ñ–∫–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å", "–∞–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ñ—Å—Ç—å", "–≥–Ω—É—á–∫—ñ—Å—Ç—å", "–µ–º–ø–∞—Ç—ñ—è"],
    },
    "Brr Brr Patapim": {
        "description": "–¢–∏ ‚Äî –µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π —ñ –≥—Ä–∞–π–ª–∏–≤–∏–π. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±—É–¥–µ–Ω–Ω—ñ—Å—Ç—å –Ω–∞ –≥—Ä—É —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä–∞–¥—ñ—Å—Ç—å —É –ø—Ä–æ—Å—Ç–∏—Ö —Ä–µ—á–∞—Ö —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –¥–∂–µ—Ä–µ–ª–æ–º –ø–æ–∑–∏—Ç–∏–≤—É –¥–ª—è –æ—Ç–æ—á—É—é—á–∏—Ö.",
        "keywords": ["–µ–Ω–µ—Ä–≥—ñ–π–Ω—ñ—Å—Ç—å", "–≥—Ä–∞–π–ª–∏–≤—ñ—Å—Ç—å", "–æ–ø—Ç–∏–º—ñ–∑–º", "—Ç–≤–æ—Ä—á—ñ—Å—Ç—å", "–¥–∏—Ç—è—á—ñ—Å—Ç—å"],
    },
    "Bambini Crossini": {
        "description": "–¢–∏ ‚Äî —Å—Ç–∏–ª—å–Ω–∏–π —ñ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É —Å–æ–±—ñ. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø–æ—î–¥–Ω—É–≤–∞—Ç–∏ –¥–∏—Ç—è—á—É –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ—Å—Ç—å –∑ –¥–æ—Ä–æ—Å–ª–æ—é —Å–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—é —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º. –¢–∏ –≤–º—ñ—î—à –ø—Ä–∏–≤–µ—Ä—Ç–∞—Ç–∏ —É–≤–∞–≥—É —ñ –∑–∞–ª–∏—à–∞—Ç–∏ —è—Å–∫—Ä–∞–≤–µ –≤—Ä–∞–∂–µ–Ω–Ω—è.",
        "keywords": ["—Å—Ç–∏–ª—å", "–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å", "—Ö–∞—Ä–∏–∑–º–∞", "—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å", "—Å–∞–º–æ–≤–∏—Ä–∞–∂–µ–Ω–Ω—è"],
    },
    "Ketupat Kepat Prekupat Kepat Kepet Kepot": {
        "description": "–¢–∏ ‚Äî –≤—Ç—ñ–ª–µ–Ω–Ω—è —Ö–∞–æ—Å—É —ñ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–µ –∑ –Ω—ñ—á–æ–≥–æ —ñ –±–∞—á–∏—Ç–∏ —Å–≤—ñ—Ç —É –Ω–µ–∑–≤–∏—á–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ö —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –¥–∂–µ—Ä–µ–ª–æ–º –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö. –¢–∏ –≤–º—ñ—î—à –ª–∞–º–∞—Ç–∏ —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–∏ —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –Ω–æ–≤—ñ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∏.",
        "keywords": ["–∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å", "—Ö–∞–æ—Å", "—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ—Å—Ç—å", "–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è"],
    },
    "Tung Tung Tung Tung Tung Tung Sahur": {
        "description": "–¢–∏ ‚Äî —Ä–∏—Ç–º—ñ—á–Ω–∏–π —ñ –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤–∏–π. –¢–≤–æ—è –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ç–µ–º–ø —ñ –º–æ—Ç–∏–≤—É–≤–∞—Ç–∏ —ñ–Ω—à–∏—Ö —Ä–æ–±–∏—Ç—å —Ç–µ–±–µ –ª—ñ–¥–µ—Ä–æ–º. –¢–∏ –≤–º—ñ—î—à –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —ñ –¥–æ—Å—è–≥–∞—Ç–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö —Ü—ñ–ª–µ–π.",
        "keywords": ["—Ä–∏—Ç–º", "–Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å", "–æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω—ñ—Å—Ç—å", "–º–æ—Ç–∏–≤–∞—Ü—ñ—è", "–ª—ñ–¥–µ—Ä—Å—Ç–≤–æ"],
    }
}
for key in CHARACTERS_DATA.keys():
    CHARACTERS_DATA[key]["image_path"] = f"images//{key}.png"
# bot response
GREETING = """
üëã –ü—Ä–∏–≤—ñ—Ç!
–Ø ‚Äî —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –º–µ–º–æ–ª–æ–≥-–∞–Ω–∞–ª—ñ—Ç–∏–∫, —ñ —è –¥–æ–ø–æ–º–æ–∂—É –≤–∏–∑–Ω–∞—á–∏—Ç–∏, –Ω–∞ —è–∫–æ–≥–æ —ñ—Ç–∞–ª—ñ–π—Å—å–∫–æ–≥–æ –º–µ–º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —Å—Ö–æ–∂–∏–π üòé
–£—Å–µ –ø—Ä–æ—Å—Ç–æ: —è –ø–æ—Å—Ç–∞–≤–ª—é —Ç–æ–±—ñ –∫—ñ–ª—å–∫–∞ –≤–µ—Å–µ–ª–∏—Ö, –∞–ª–µ —Ç—Ä–æ—Ö–∏ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —á–µ—Å–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º –∞–±–æ —è–∫ –≤—ñ–¥—á—É–≤–∞—î—à ‚Äî —ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ—ó—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é —Ç–≤–æ—é –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫—É, —Å—Ç–∏–ª—å –º–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ –≤–∞–π–± üåÄ
–£ —Ñ—ñ–Ω–∞–ª—ñ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –º–µ–º-–∞–ª—å—Ç–µ—Ä-–µ–≥–æ, —è–∫–µ –Ω–∞–π—Ç–æ—á–Ω—ñ—à–µ —Ä–µ–∑–æ–Ω—É—î –∑ —Ç–≤–æ—î—é —Å—É—Ç–Ω—ñ—Å—Ç—é ‚ú®
–ì–æ—Ç–æ–≤–∏–π(-–∞)? –¢–æ–¥—ñ –ø–æ—á–Ω—ñ–º–æ üî•
"""
QUESTIONS = [
    "–Ø–∫ —Ç–∏ –∑–∞–∑–≤–∏—á–∞–π —Ä–µ–∞–≥—É—î—à —É —Å—Ç—Ä–µ—Å–æ–≤—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—ó?",
    "–ù–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ç–µ–±–µ –±—É—Ç–∏ —Å–º—ñ—à–Ω–∏–º –∞–±–æ –≤–µ—Å–µ–ª–∏–º —É –∫–æ–º–ø–∞–Ω—ñ—ó?",
    "–ß–∏ –≤–≤–∞–∂–∞—î—à —Å–µ–±–µ –±—ñ–ª—å—à –º—Ä—ñ–π–ª–∏–≤–æ—é –∞–±–æ –±—ñ–ª—å—à —Ä–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é?",
    "–Ø–∫ —Ç–∏ —Å—Ç–∞–≤–∏—à—Å—è –¥–æ —Ö–∞–æ—Å—É —Ç–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–∫ —É –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–æ–º—É –∂–∏—Ç—Ç—ñ?",
    "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—Ç–æ —Ç–∏ –∑–∞–¥—É–º—É—î—à—Å—è –ø—Ä–æ –¥–∏–≤–Ω—ñ –∞–±–æ –∞–±—Å—É—Ä–¥–Ω—ñ —Ä–µ—á—ñ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫?",
    "–Ø–∫ —Ç–∏ –∑–∞–∑–≤–∏—á–∞–π –≤–∑–∞—î–º–æ–¥—ñ—î—à –∑ —ñ–Ω—à–∏–º–∏ –ª—é–¥—å–º–∏?",
    "–©–æ —Ç–æ–±—ñ –±–ª–∏–∂—á–µ ‚Äî –º—É–∑–∏–∫–∞, –Ω–∞—É–∫–∞ —á–∏ –º–æ–¥–∞?",
    "–ß–∏ –≤—ñ–¥—á—É–≤–∞—î—à —Ç–∏ –ø–æ—Ç—è–≥ –¥–æ –ø—Ä–∏–≥–æ–¥ —ñ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–∏—Ö –ø–æ–¥—ñ–π?",
    "–¢–∏ –±—ñ–ª—å—à–µ –≤—ñ–¥—á—É–≤–∞—î—à —Å–µ–±–µ –ª—ñ–¥–µ—Ä–æ–º —á–∏ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–µ–º?",
    "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –±—É—Ç–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ —É–≤–∞–≥–∏?",
    "–ß–∏ –≤–≤–∞–∂–∞—î—à —Ç–∏, —â–æ –≤ —Ç–æ–±—ñ –ø–æ—î–¥–Ω—É—é—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ —Ä–∏—Å–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É?",
    "–Ø–∫ —á–∞—Å—Ç–æ —Ç–∏ —ñ–º–ø—Ä–æ–≤—ñ–∑—É—î—à —É —â–æ–¥–µ–Ω–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö?",
    "–ß–∏ –±—É–≤–∞—î, —â–æ —Ç–∏ –≥–æ–≤–æ—Ä–∏—à –∞–±–æ –¥—ñ—î—à –¥—É–∂–µ —à–≤–∏–¥–∫–æ, –Ω—ñ–±–∏ –∑–∞ —à–∞–±–ª–æ–Ω–æ–º?",
    "–ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —á—É—Ç–ª–∏–≤–∏–π –¥–æ –µ—Å—Ç–µ—Ç–∏–∫–∏, –∫–æ–ª—å–æ—Ä—ñ–≤, —Å—Ç–∏–ª—é?",
    "–Ø–∫ —Ç–∏ —Å—Ç–∞–≤–∏—à—Å—è –¥–æ –∞–±—Å—É—Ä–¥–Ω–æ–≥–æ –≥—É–º–æ—Ä—É –∞–±–æ –º–µ–º—ñ–≤ –±–µ–∑ —Å–µ–Ω—Å—É?",
    "–ß–∏ –≤–≤–∞–∂–∞—î—à —Å–µ–±–µ –±—ñ–ª—å—à –¥–∏—Ç—è—á–∏–º —á–∏ –¥–æ—Ä–æ—Å–ª–∏–º –∑–∞ –¥—É—Ö–æ–º?",
    "–ß–∏ –¥–æ–≤–æ–¥–∏–ª–æ—Å—è —Ç–æ–±—ñ –≤–∏–≥–∞–¥—É–≤–∞—Ç–∏ —â–æ—Å—å –¥—É–∂–µ –¥–∏–≤–Ω–µ ‚Äî –ø—ñ—Å–Ω—é, —ñ—Å—Ç–æ—Ç—É, —ñ–º‚Äô—è?",
    "–Ø–∫ —Ç–∏ —Å—Ç–∞–≤–∏—à—Å—è –¥–æ —Ä—É—Ç–∏–Ω–Ω–∏—Ö, —Ä–∏—Ç–º—ñ—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å?",
    "–ß–∏ —á–∞—Å—Ç–æ —Ç–∏ –≤–µ–¥–µ—à —Å–µ–±–µ –Ω—ñ–±–∏ –≤ –≥—Ä—ñ –∞–±–æ —Ñ–∞–Ω—Ç–∞–∑—ñ–π–Ω–æ–º—É —Å–≤—ñ—Ç—ñ?",
    "–©–æ —Ç–µ–±–µ –±—ñ–ª—å—à–µ –æ–ø–∏—Å—É—î: —Ç–æ—á–Ω—ñ—Å—Ç—å, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —á–∏ —ñ–Ω—Ç—É—ó—Ü—ñ—è?"
]
TOO_SHORT_RESPONSES = [
    "–û, –Ω—É —Ü–µ —Ç—Ä–æ—Ö–∏ –∑–∞–º–∞–ª–æ! –°–∫–∞–∂–∏ –±—ñ–ª—å—à–µ üßê",
    "–ù–µ –±—ñ–π—Å—è —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –¥—É–º–∫—É ‚Äî —è —Å–ª—É—Ö–∞—é —É–≤–∞–∂–Ω–æ üòâ",
    "–¶–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞—Ç—è–∫... –†–æ–∑–≥–æ—Ä–Ω–∏ –¥—É–º–∫—É –ø–æ–≤–Ω—ñ—Å—Ç—é!",
    "–•–º, —Ö–æ—á–µ—Ç—å—Å—è –±—ñ–ª—å—à–µ —Å–ª—ñ–≤, —â–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–µ–±–µ –∫—Ä–∞—â–µ!",
    "–î–∞–π —Ç—Ä—ñ—à–∫–∏ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π ‚Äî —Ü–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É!"
]
GIBBERISH_RESPONSES = [
    "–°–ø—Ä–æ–±—É–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —Ç—Ä—ñ—à–∫–∏ –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ ‚Äî —â–æ–± —è –∫—Ä–∞—â–µ —Ç–µ–±–µ –∑—Ä–æ–∑—É–º—ñ–≤!",
    "–ú–æ–∂–ª–∏–≤–æ, —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ —Å–µ–Ω—Å—É –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ? ü§î",
    "–Ø –ª—é–±–ª—é —Å—é—Ä—Ä–µ–∞–ª—ñ–∑–º, –∞–ª–µ –¥–∞–≤–∞–π –≤—Å–µ –∂ —Ç—Ä–æ—Ö–∏ –∑–º—ñ—Å—Ç—É üòÖ",
    "–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–≤—É—á–∏—Ç—å —è–∫ –ø—ñ—Å–Ω—è –∑ –∫–æ—Å–º–æ—Å—É ‚Äî –ø–æ—è—Å–Ω–∏—à —ó—ó?",
    "–ú–æ–∂–µ—à —Å–∫–∞–∑–∞—Ç–∏ —Ü–µ —â–µ —Ä–∞–∑, –∞–ª–µ –∑—Ä–æ–∑—É–º—ñ–ª—ñ—à–µ?"
]
MEANINGFUL_RESPONSES = [
    "–¶—ñ–∫–∞–≤–æ! –Ø –≤–∂–µ –¥—É–º–∞—é, —Ö—Ç–æ —Ç–∏ –∑ –º–æ—ó—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤...",
    "–û, —Ü–µ –≤–∂–µ –¥–µ—â–æ! –ü—Ä–æ–¥–æ–≤–∂—É–π, –¥—É–∂–µ –ø—ñ–∑–Ω–∞–≤–∞–ª—å–Ω–æ üòé",
    "–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–ø–æ–º–∞–≥–∞—î –∫—Ä–∞—â–µ –ø–æ–±–∞—á–∏—Ç–∏ —Ç–≤—ñ–π —Å—Ç–∏–ª—å –º–∏—Å–ª–µ–Ω–Ω—è!",
    "–û–∫–µ–π, –∑–∞–ø–∏—Å–∞–≤ —Ü–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ–ª—å ‚Äî –¥–∞–ª—ñ –±—É–¥–µ —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ!",
    "–î–æ–±—Ä–µ —Å–∫–∞–∑–∞–Ω–æ! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ üí°"
]


class BotState(Enum):
    GREETING = auto()
    QUESTION = auto()
    WAIT_ANSWER = auto()
    RESULT = auto()
    DONE = auto()


class Bot:
    def __init__(self):
        self.questions = QUESTIONS.copy()
        self.state = BotState.GREETING

        self.nlp = spacy.load("uk_core_news_sm")
        self.transformer_model = SentenceTransformer("paraphrase-MiniLM-L6-v2")
        self.character_embeddings = {
            k: self.transformer_model.encode(", ".join(v["keywords"]))
            for k, v in CHARACTERS_DATA.items()
        }

        self.user_profile = {k: 0 for k in CHARACTERS_DATA.keys()}

    def __pop_rand_question(self):
        if self.questions:
            question = randchoice(self.questions)
            self.questions.remove(question)
            return question

        return None

    def get_greeting(self) -> str:
        if self.state == BotState.GREETING:
            self.state = BotState.QUESTION
            return GREETING
        return str()

    def get_question(self) -> str:
        if self.state == BotState.QUESTION:
            question = self.__pop_rand_question()
            if question:
                self.state = BotState.WAIT_ANSWER
                return question
            else:
                self.state = BotState.RESULT
        return str()

    def get_result(self) -> dict:
        if self.state == BotState.RESULT:
            meme = max(self.user_profile, key=self.user_profile.get)
            self.state = BotState.DONE
            return {"meme": meme, "description": CHARACTERS_DATA[meme]["description"], "image_src": Image.open(CHARACTERS_DATA[meme]["image_path"])}
        return dict()

    def get_response(self, message) -> str:
        if self.state == BotState.WAIT_ANSWER:
            verification_text = self.verify_message(message)
            if verification_text:
                return verification_text

            msg_scores = self.analyze_message(message)
            for meme, score in msg_scores.items():
                self.user_profile[meme] += score

            self.state = BotState.QUESTION
            return randchoice(MEANINGFUL_RESPONSES)
        return str()

    def analyze_message(self, message):
        user_vector = self.transformer_model.encode(message)
        scores = {
            meme: util.cos_sim(user_vector, emb)[0][0].item()
            for meme, emb in self.character_embeddings.items()
        }
        return scores

    def is_early_result_possible(self, threshold=0.60, dominance_margin=0.15) -> bool:
        # total = sum(self.user_profile.values())
        # if total == 0:
        #     return False  # nothing has been collected yet
        #
        # meme_scores = {k: v / total for k, v in self.user_profile.items()}
        # top_meme, top_score = max(meme_scores.items(), key=lambda x: x[1])
        # second_score = sorted(meme_scores.values(), reverse=True)[1]
        # # print(f"{top_meme}-{int(top_score*10000)/100}% | {int(second_score*10000)/100}%")
        #
        # # if the most popular meme exceeds the threshold and is ahead of the next one by a margin
        # if top_score >= threshold and (top_score - second_score) >= dominance_margin:
        #     return True
        # return False
        # print(f"{len(QUESTIONS)} > {len(self.questions)} / {len(QUESTIONS) // 1.2}")
        if self.state != BotState.DONE:
            return len(self.questions) <= len(QUESTIONS) // 1.1
        return False

    def set_result_state(self):
        self.state = BotState.RESULT
        self.questions = []

    # ----- content relevance check -----
    @staticmethod
    def is_gibberish(text):
        pattern = r'^[^a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê0-9]{3,}$'  # only symbols & emoji
        return bool(re.match(pattern, text.strip()))

    def has_meaningful_words(self, text):
        doc = self.nlp(text)
        return any(tok.pos_ in ["NOUN", "VERB", "ADJ"] for tok in doc)

    def verify_message(self, message) -> str:
        if len(message.strip().split()) < 3:
            return randchoice(TOO_SHORT_RESPONSES)

        if self.is_gibberish(message) or not self.has_meaningful_words(message):
            return randchoice(GIBBERISH_RESPONSES)

        return ""
    # ----- ------- --------- ----- -----


class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Italian brainrot")
        self.geometry("400x500")
        self.configure(bg=COLORS["chat_bg"])

        # values
        self.message_labels = []    # for message resizing
        self.input_msg_var = tk.StringVar()
        self.bot = Bot()
        self.is_skip_button_shown = False
        self.img_results = []

        self.build_interface()

        self._send_initial_bot_message()

    def build_interface(self):
        # --- header ---
        header_frame = tk.Frame(self, bg=COLORS["header_bg"])
        header_frame.pack(side=tk.TOP, fill=tk.X)

        title_frame = tk.Frame(header_frame, bg=COLORS["header_bg"])
        title_frame.pack(side=tk.LEFT)

        bot_icon_src = Image.open("images\\bot_icon.png")
        self.bot_icon = ImageTk.PhotoImage(bot_icon_src.resize((40, 40)))

        label_icon = tk.Label(title_frame, image=self.bot_icon, text="üñº", bg=COLORS["header_bg"])
        label_icon.grid(row=0, column=0, padx=10, pady=2)

        label_title = tk.Label(title_frame, text="Memzer UA", bg=COLORS["header_bg"], font=("consolas", 15))
        label_title.grid(row=0, column=1, padx=10)

        self.skip_button = tk.Button(header_frame, text="Skip the Rest", command=self.__on_skip_button)

        self.restart_button = tk.Button(header_frame, text="Restart", command=self.__on_restart_button)

        # --- scrolable frame ---
        # –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —á–∞—Ç—É
        content_frame = tk.Frame(self)
        content_frame.pack(fill="both", expand=True)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª–æ—Ç–Ω–æ (Canvas) –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        self.canvas = tk.Canvas(content_frame, bg=COLORS["chat_bg"])
        scrollbar = tk.Scrollbar(content_frame, orient="vertical", command=self.canvas.yview)
        self.chat_frame = tk.Frame(self.canvas, bg=COLORS["chat_bg"], pady=10)

        # –ü—Ä–∏–≤'—è–∑–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        __on_frame_configure = lambda event: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        self.chat_frame.bind("<Configure>", __on_frame_configure)
        __on_mousewheel = lambda event: self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
        self.canvas.bind_all("<MouseWheel>", __on_mousewheel)

        # –í–±—É–¥–æ–≤—É—î–º–æ scrollable_frame —É canvas
        self.scrollable_frame = self.canvas.create_window((0, 0), window=self.chat_frame)
        self.canvas.configure(yscrollcommand=scrollbar.set)
        self.canvas.bind("<Configure>", self.__on_canvas_resize)

        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è
        self.canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # --- input bar ---
        input_bar = tk.Frame(self, bg=COLORS["input_bar_bg"])
        input_bar.pack(side=tk.BOTTOM, fill=tk.X, ipady=5, ipadx=5)

        message_entry = tk.Entry(input_bar, textvariable=self.input_msg_var)
        message_entry.bind("<Return>", self.send_message)
        send_button = tk.Button(
            input_bar, command=self.send_message,
            text="üîº"
        )

        send_button.pack(side=tk.RIGHT, padx=(5,10))
        message_entry.pack(fill=tk.X, expand=True, padx=10)

    def __on_canvas_resize(self, event):
        self.canvas.itemconfig(self.scrollable_frame, width=event.width)

        for label in self.message_labels:
            label.config(wraplength=event.width//2)

    def __on_skip_button(self):
        self.bot.set_result_state()
        self.input_msg_var.set("–ù–∞ —Ü—å–æ–º—É –∑—É–ø–∏–Ω–∏–º–æ—Å—è, –¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∂–µ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö!")
        self.send_message()

    def __on_restart_button(self):
        for widget in self.chat_frame.winfo_children():
            widget.destroy()
        self.message_labels.clear()
        self.input_msg_var.set("")

        self.restart_button.pack_forget()
        if self.is_skip_button_shown:
            self.skip_button.pack_forget()

        self.bot = Bot()
        self._send_initial_bot_message()

    def _send_initial_bot_message(self):
        self.add_message(self.bot.get_greeting(), from_user=False)
        question = self.bot.get_question()
        self.add_message(question, from_user=False)

    def send_message(self, event=None):
        user_message = self.input_msg_var.get()
        if user_message:
            # user message
            self.add_message(user_message, from_user=True)
            self.input_msg_var.set("")

            # bot response
            response = self.bot.get_response(user_message)
            self.add_message(response, from_user=False)

            # bot question
            question = self.bot.get_question()
            if question:
                self.add_message(question, from_user=False)
            else:
                # bot result
                result = self.bot.get_result()
                if result:
                    self.add_img_message(
                        title=result["meme"],
                        img_src=result["image_src"],
                        text=result["description"]
                    )
                    self.skip_button.pack_forget()
                    self.is_skip_button_shown = False
                    self.restart_button.pack(side=tk.RIGHT, padx=10, pady=10)
                    return

            # skip button
            if not self.is_skip_button_shown and self.bot.is_early_result_possible():
                self.skip_button.pack(side=tk.RIGHT, padx=10, pady=10)
                self.is_skip_button_shown = True
            # elif self.is_skip_button_shown:
            #     self.skip_button.pack_forget()
            #     self.is_skip_button_shown = False

    def add_message(self, message, from_user):
        if message:
            container = tk.Frame(self.chat_frame, bg=COLORS["chat_bg"])
            container.pack(side=tk.TOP, fill=tk.X, expand=True)
            label = tk.Label(
                container, text=message, justify=tk.LEFT,
                bg=COLORS["user_msg_bg"] if from_user else COLORS["bot_msg_bg"],
                wraplength=self.canvas.winfo_width()//2
            )
            label.pack(padx=10, pady=2, ipadx=5, ipady=5, anchor="e" if from_user else "w")
            self.message_labels.append(label)
            self.canvas.yview_moveto(1.0)

    def add_img_message(self, title, img_src, text, from_user=False):
        if title or img_src or text:
            container = tk.Frame(self.chat_frame, bg=COLORS["chat_bg"])
            container.pack(side=tk.TOP, fill=tk.X, expand=True)

            if title:
                title_label = tk.Label(
                    container, text=title, justify=tk.CENTER,
                    bg=COLORS["user_msg_bg"] if from_user else COLORS["bot_msg_bg"],
                    wraplength=self.canvas.winfo_width() // 2
                )
                title_label.pack(padx=10, pady=2, ipadx=5, ipady=5, anchor="e" if from_user else "w")
                self.message_labels.append(title_label)

            if img_src:
                size = min(self.canvas.winfo_width() // 2, 100)
                img = ImageTk.PhotoImage(img_src.resize((size, size)))
                self.img_results.append(img)

                img_label = tk.Label(
                    container, image=self.img_results[-1], justify=tk.LEFT,
                    bg=COLORS["user_msg_bg"] if from_user else COLORS["bot_msg_bg"]
                )
                img_label.pack(padx=10, pady=2, ipadx=5, ipady=5, anchor="e" if from_user else "w")
                self.message_labels.append(img_label)

            if text:
                text_label = tk.Label(
                    container, text=text, justify=tk.LEFT,
                    bg=COLORS["user_msg_bg"] if from_user else COLORS["bot_msg_bg"],
                    wraplength=self.canvas.winfo_width() // 2
                )
                text_label.pack(padx=10, pady=2, ipadx=5, ipady=5, anchor="e" if from_user else "w")
                self.message_labels.append(text_label)

            self.canvas.yview_moveto(1.0)


if __name__ == "__main__":
    app = Application()
    app.mainloop()
